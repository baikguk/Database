데이터 베이스 : 
  여러 사용자가 공유할 수 있도록 통합해서 저장한 
  운영데이터의 집합 
    (통합(최소중복),공유,저장,운영(지속유지)) 

DB 특성
  실시간 접근, 지속 변화, 내용기반참조(주소참조x), 동시 공유

파일시스템
  응용프로그램에 종속, 중복저장, 보안, 공유의 한계점
  응용프로그램 개발이 쉽지 않음
  데이터의 일관성과 무결성(정확성,보관)이 유지하기 어려움

DBSM (DB 관리 시스템)
 (데이터구조정의, 데이터 삽입,삭제,수정,검색, 제어(정확,안정)
 파일 시스템의 한계와 단점을 보안하기 위해 나옴)
	- 질의 처리기 (DDL, DML, 컴파일러 트랜잭션 관리자)
	- 저장 데이터 관리자 ( 데이터 사전, 사용자 DB 관리 및 접근하는 역할)

DB System의 구성
 1.사용자 - DB관리자, 최종사용자, 응용 프로그래머
 2. 데이터 언어 - 데이터 정의어,조작어, 제어어
 3, 데이터베이스 - 외부,개념, 내부 스키마(단계)
 4. DBSM - 질의 처리기, 저장 데이터 관리자

데이터베이스의 구조
 - 스키마 : DB에 저장되는 데이터 구조와 제약조건
 - 인스턴스 : 스키마에 따른 DB에 저장된 실제값

 - 3단계 DB 구조 (	내부 -> 외부로 갈수록 추상적임)
	- 외부단계(스키마) : 개별 사용자 관점
	ex) 상품 배송팀 (고객번호,이름,주소,연락처)
	  -> 따라서 사용자마다 원하는 논리가 다름
				ㄴ sub스키마라고도 함

	- 개념단계(스키마) : 조직 전체의 관점 ->수업의 주요관점
	ex) 고객 table은 번호,이름,성별,나이 등으로 이루어짐
	  -> 어떤 데이터, 데이터간의 관계, 제약조건,보안정책도
	       해당됨

	- 내부단계(스키마) : 물리적인 저장 장치의 관점
		필드이름, 크기,인덱스 등 구체적인 제약사항

  - 3단계 DB구조의 사상 또는 매핑 -> 데이터 독립성을 위해 
    외부/개념 -> 응용인터페이스
    개념/내부 -> 저장인터페이스

  - 데이터 독립성 
    하위 스키마가 변경하더라도 상위 스키마가 영향을 받지 않음

  - 데이터 사전(=System catalog)
    스키마, 사상정보, 다양항 제약조건 저장
    DBSM이 스스로 생성하고 유지함

  - 데이터 디렉토리
    데이터 사전에 접근하는데 필요한 위치 정보를 저장하는 DB
    일반 사용자 접근 불가

  - 사용자 DB 
    사용자가 사용하는 일반적 DB

DB 사용자
	DB 관리자
	  -DB 정의,제어어
	  -스키마 정의, 보안 및 접근 권한, 무결성을 위한 제약조건

	일반(최종) 사용자
            	 - DB에 접근하여 데이터를 조작(삽입,삭제,수정,검색)

	응용프로그래머
	 - 데이터 언어를 삽입하여 응용프로그램 작성
데이터 언어
	정의어(DDL) : 스키마 정의 수정 삭제
	조작어(DML) : 데이터 삽입 삭제 수정
		절차적 : 사용자가 원하는 데이터와 얻는 방법 처리
		비절차적 : 사용자가 원하는 데이터만 설명
			-> 주로 sql이 이에 해당
	제어어(DCL) : 내부적으로 필요한 규칙,기법 정의


데이터베이스 설계
	사용자 요구사항을 고려해 DB 생성
	   ㄴ 필요 데이터, 데이터에 어떤 처리가 필요한지 고려

	E-R 모델과 릴레이션 변환 규칙을 이용한 설계의 과정

	데이터 모델링
		현실세계 데이터를 DB로 옮기는 과정
			-> 추상화(abstraction)

	데이터 모델
		개념적 데이터 모델 (개체,관계,속성)(E-R모델)
			현실세계를 개념적 구조로 표현하는 도구
		논리적 데이터 모델	(관계데이터 모델)
			개념구조를 DB 논리 구조로 표현
			모든 개체를 릴레이션으로 변호나
			n:m 관계는 릴레이션으로 변환
			다중값속성은 릴레이션으로 변환
			1:n, 1:1은 외래키로 표현

	개체-관계 모델(Entity-Relation) && E-R 다이어그램
	
	개체 (E-R에서 사각형으로 표현)
	  ex) 서점에 필요한 개체 : 고객, 책
	  ex) 병원에 필요한 개체 : 학과,과목
	
	속성(attribute)
	  개체나 관계가 가지고 있는 고유 특성(E-R에서 타원으로)

	  단일속성(타원, 고객아이디) , 다중 속성(이중 타원,전화번호)
					ㄴ 2개이상의 값

	  단순속성, 복합속성(주소->시,동,읍 으로 분해할수 잇음)

	  유도 속성 : 생년월이로 -> 나이 유추(점선타원)
		 

	관계(relationship)
	  개체와 개체간의 관계 (마름모)

	   이항관계,삼항관계,순환관계(개체 한개가 자신과 맺는)

	  매핑 카디널리티
		1:1, 1:n, n:m 관계

	  관계 특성
		필수적 참여(이중선), 선택적 참여

	  관계 종속성
		약한개체(이중사각형), 오너 개체
	ex) 직원(오너객체) - 부양(이중 마름모) - 부양가족(약한 개체)
		직원이 없다면 부양가족이 존재할 수 없음
		    -> 약한개체는 오너개체의 키를 포함하여 구성

개념 데이터 설계 실습
 	1. 요구사항 분석
 	2. 개념적 설계 
	  2.1 개체와 속성 추출 - 요구사항에 따라 명사 위주로
	  2.2 관계 추출 - 요구사항의 동사 위주로
		매핑 카디널리티와 관계 특성을 파악하기

관계 데이터 모델링 
	개념적 구조를 논리적 구조로
	하나의 개체에 대한 데이터를 하나의 릴레이션에 저장

	기본 용어
   	  릴레이션 : 하나의 개체에 대한 데이터를 2차원 테이블로 
	  속성 : 릴레이션의 열
	  투블 : 릴레이션의 행
	  도메인 : 하나의 속성이 가질 수 있는 값의 집합 ex) type(int)
	  차수: 하나의 릴레이션에서 속성의 전체 개수
	  카디널리티 : 하나의 릴레이션에서 투플의 전체 개수

	릴레이션의 구성
	  릴레이션 스키마(ex : 고객 (고객id,고객이름,나이,등급)
	  	ㄴ 정적임, 릴레이션 내포, 릴레이션의 뼈대
	  릴레이션 인스턴스 : 투프들의 집합
		ㄴ 동적임, 릴레이션 외연, 릴레이션의 실제값

	데이터베이스이 구성
	  DB 스키마 : 릴레이션 스키마의 모음
	  DB 인스턴스 : 릴레이션 인스턴스의 모음

	릴레이션의 특성
	  튜플의 유일성 : 하나의 릴레이션에는 동일한 투플 존재x
	  투플의 무순서 : 투플 사이의 순서는 무의미
	  속성의 무순서 : 순서의 의미 x
	  속성의 원자성 : 속상 값으로 원자 값만 사용
				ㄴ 다중 값이 안됨
				ㄴ 릴레이션을 분해하여 새로만듬

	키(key) : 릴레이션에서 투플들을 유일하게 구별하는 속성
	  키의 특성 : 유일성, 최소성(최소한의 속성으로 키로구성)
	  super key : 유일성을 만족하는 속성
	  candidate key(후보키) : 유일성과 최소성을 만족하는 속성	
	  primary key : 후보키중 기본적으로 사용하는 키	
		ㄴ null 값 없고, 변경이 안되며, 단순한	
	  alternate key(대체키): 기본키로 선택되지 못한 후보키	
	  foreign key : 다른 릴레이션의 기본키를 참조하는 속성
		ㄴ 같은 릴레이션 내에서 기본키를 참조하는 외래키도
		     가능 ex) 고객 릴레이션(고객아이디, 추천고객)
				ㄴ 순환관계, null값 가능

	무결성제약조건 : 데이터의 결함이 없고, 정확하고 유효하게 유지
		개체 무결성제약조건 : 기본키는 null값 x
		참조 무결성제약조건 : 참조할수 없는 값을 참조할때
			ex) 고객id에 없는 주문고객의 값
관계 데이터 모델링 실습
	논리적 설계
    	  복합속성 -> 릴레이션스키마에서는 단순속성으로
	  n:m의 경우 릴레이션을 분할 시키고 관계를 릴레이션으로 만듬	
	  1:n의 경우 외래키로 표현
		ex) 학생 - 지도 - 교수
		       n         :       1	 
		n측 릴레이션(학생)에 1측(교수) 기본키를 포함시킴
	  cf) 1:n 관계의 약한객체의 경우 외래키를 기본키에 포함시킴
	
	  1:1 일반적일 경우 외래키를 서로 주고 받음(남자 - 혼인 -여자)
		필수적 참여일 경우 필수참여 릴레이셔만 외래키받음
		 ex) 남자(필수참여)인 경우 여자는 외래키 없어도 됨
			cf) 여자의 경우 외래키를 받으면 null값이
			    많아지기 때문에 외래키를 받지않음
		둘다 필수일 경우 하나의 릴레이션으로 포현(혼인)	

	다중값 속성
		독립적인 릴레이션으로 변환 (사원에서의 부하직원)
		새로운릴레이션에서 다중값의 속성과 외래키를 기본키
		``				(사원) (부하직언)

	기타 고려사항 - 속성이 많다면 독립적인 릴레이션으로

이상현상
  데이터 중복으로 인해 릴레이션에 대한 데이터 삽입,수정,삭제
  연산을 수행할 때 발생할 수 있는 부작용
	ex)       이벤트참여 릴레이션
	고객아이디,이벤트번호,당첨여부,고객이름,등급

  -삽입이상 : 삽입시 불필요한 데이터도 함께 삽입되는 경우
	ex) 이벤트참여 릴레이션에서 기존고객중 참여하지않는 고객을
	     삽입할 경우,  이벤트번호, 당첨여부 속성이 Null이됨

  -갱신이상 : 중복 투플 중 일부만 변경되 데이터가 불일치하게 되는 모순
	ex) 동일한 고객이 여러번 이벤트를 참여했을때 이벤트번호가
	     각각 등록되어 여러개의 튜플이 만들어짐
	   -> 데이터 수정시 일부만 변경될 수도

  -삭제이상 : 투플을 삭제하면 필요한 데이터까지 삭제되는 손실 문제

정규화 
  이상현상이 발생하지 않도록, 릴레이션을 분해하는 과정
  함수의 종속성을 판단하여 정규화를 수행함

 -함수의 종속성(FD, Functional Dependency) 
    X가 Y를 함수적으로 결정한다 (X(결정자)->Y(종속자)
    함수는 하나의 X값에 대해 Y값은 하나여야만함

  ex) 고객아이디,고객이름,등급
	고객아이디는 고객이름,등급을 결정한다(ㅇ)
	고객이름은 등급을 결정한다(x) 동명이인의 경우 고려

 -함수 종속 다이어그램: 함수 종속 관계를 도식화하여 표현한 것

  종속관계 판단시 유의점
    현재 속성값만으로는 판단하면 안됨(이후 추가되는 값도 고려해주자)
    주로 기본키,후보키가 다른 모든 속성을 함수적으로 결정해줌(아닌경우도 있음)

		ex) (고객아이디,이벤트번호),당첨여부,고객이름,등급
			ㄴ 기본키
  완전함수 종속(Full Functional Dependency) 
	ex) 당첨여부는 고객아이디,이벤트번호 완전종속
  부분함수 종속(PFD : Partial Functional Dependency) 
	ex) 고객이름은 고객아이디만으로 구별되어 
				고객아이디,이벤트번호에 부분종속
  이행적함수종속(transitive FD)
	X->Y, Y->Z 논리가 존재하면 X->Z도 성립되는데 
	이를 이행적으로 함수 종속되었다함
	ex) X : 고객, Y : 등급, Z : 할인율

  고려할 필요가 없는 함수 종속관계
	ex) 고객아이디 -> 고객아이디
	     (고객아이디,이벤트번호) -> 이벤트번호


정규형 (Normal Form)
  릴레이션이 정규화된 정도
  각 정규화 마다 제약조건 존재 차수가 높을수록 제약조건 많고, 중복이 줄어
  이상현상이 덜 발생 -> 바람직한 릴레이션

  기본정규형(1~3정규형, 보이스/코드)
	제 1 정규형 : 릴레이션의 모든속성이 원자값(다중속성x)으로 구성
	제 2 정규형 :  이전 정규형에 속하고 기본키가 아닌 모든 속성이 
		       기본키에 완전 함수 종속됨
		ex) "등급", "할인율"이 고객아이디에 의해 구별됨으로
		     (고객아이디,이벤트번호) 가 기본키인 릴레이션을
		     고객 릴레이션, 이벤트 참여 릴레이션으로 분해
	제 3 정규형 : 이전 정규형에 속하고, 기본키가 아닌 모든 속성이
		      기본키에 이행적 함수 종속관계가 아님  
		ex) "고객아이디"-> "등급", "등급" -> "할인율"인 이행적 종속
		      을 고객릴레이션, 고객 등급 릴레이션으로 분해
	보이스/코드 정규형

  고급 정규형(4~5 정규형)

